# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def printTree(self, root: Optional[TreeNode]) -> List[List[str]]:
        height = self.getTreeHeight(root)

        row, col = height + 1, (2**(height + 1)) - 1
        arr = [["" for _ in range(col)] for _ in range(row)]

        arr[0][(col - 1) // 2] = str(root.val)

        def recursion(node, r, c):
            nonlocal arr
            if node:
                arr[r][c] = str(node.val)
                recursion(node.left, r + 1, c - (2 ** (height - r - 1)))
                recursion(node.right, r + 1, c + (2 ** (height - r - 1)))
        
        recursion(root.left, 1, ((col - 1) // 2) - (2 ** (height - 0 - 1)))
        recursion(root.right, 1, ((col - 1) // 2) + (2 ** (height - 0 - 1)))

        return arr

    
    def getTreeHeight(self, root):
        def recursion(node, height):
            if not node: return height - 1

            return max(
                recursion(node.left, height + 1), recursion(node.right, height + 1)
            )
        return recursion(root, 0)

