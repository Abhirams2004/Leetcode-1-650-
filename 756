class Solution:
    def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:
        mem = dict()
        mem2 = set()
        for a in allowed:
            if a[:2] not in mem:
                mem[a[:2]] = list()
            
            mem2.add(a[0])

            mem[a[:2]].append(a[-1])
        
        n = len(bottom)

        def helper(cur_sol, i, j):
            if i == n:
                return True
            
            l, r = cur_sol[i - 1][j], cur_sol[i - 1][j + 1]
            if l + r in mem:
                for candidate in mem[l + r]:
                    if j == 0 or (j > 0 and cur_sol[i][j - 1] + candidate in mem):
                        if j == n - i - 1 or (j < n - i - 1 and candidate in mem2):
                            cur_sol[i].append(candidate)
                            if j < n - i - 1:
                                next_i, next_j = i, j + 1
                            else:
                                next_i, next_j = i + 1, 0
                            if helper(cur_sol, next_i, next_j):
                                return True

                            cur_sol[i].pop()

            return False

        cur_sol = [list(bottom)] + [list() for _ in range(n - 1)]
        return helper(cur_sol, 1, 0)            
